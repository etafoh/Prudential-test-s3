Step-08-01: Create MY_AWS_SECRET_ACCESS_KEY

    Go to Services -> Systems Manager -> Application Management -> Parameter Store -> Create Parameter
        Name: /CodeBuild/MY_AWS_ACCESS_KEY_ID
        Descritpion: My AWS Access Key ID for python CodePipeline Project
        Tier: Standard
        Type: Secure String
        Rest all defaults
        Value: ABCXXXXDEFXXXXGHXXX

Step-08-02: Create MY_AWS_SECRET_ACCESS_KEY

    Go to Services -> Systems Manager -> Application Management -> Parameter Store -> Create Parameter
        Name: /CodeBuild/MY_AWS_SECRET_ACCESS_KEY
        Descritpion: My AWS Secret Access Key for python CodePipeline Project
        Tier: Standard
        Type: Secure String
        Rest all defaults
        Value: abcdefxjkdklsa55dsjlkdjsakj



buildspec-dev.yml

Create Github Repository and Check-In file

Verify if AWS Connector for GitHub already installed on your Github

    Go to below url and verify
    URL: https://github.com/settings/installations

Step-13: Create Github Connection from AWS Developer Tools

    Go to Services -> CodePipeline -> Create Pipeline
    In Developer Tools -> Click on Settings -> Connections -> Create Connection
    Select Provider: Github
    Connection Name: python-iacdevops-aws-cp-con1
    Click on Connect to Github
    GitHub Apps: Click on Install new app
    It should redirect to github page Install AWS Connector for GitHub
    Only select repositories: python-iacdevops-with-aws-codepipeline
    Click on Install
    Click on Connect
    Verify Connection Status: It should be in Available state
    Go to below url and verify
    URL: https://github.com/settings/installations
    You should see Install AWS Connector for GitHub app installed

Step-14: Create AWS CodePipeline

    Go to Services -> CodePipeline -> Create Pipeline

Pipeline settings

    Pipeline Name: python-iacdevops-aws-cp1
    Service role: New Service Role
    rest all defaults
        Artifact store: Default Location
        Encryption Key: Default AWS Managed Key
    Click Next

Source Stage

    Source Provider: Github (Version 2)
    Connection: python-iacdevops-aws-cp-con1
    Repository name: python-iacdevops-with-aws-codepipeline
    Branch name: main
    Change detection options: leave to defaults as checked
    Output artifact format: leave to defaults as CodePipeline default

Add Build Stage

    Build Provider: AWS CodeBuild
    Region: N.Virginia
    Project Name: Click on Create Project
        Project Name: codebuild-python-iacdevops-aws-cp1
        Description: CodeBuild Project for Dev Stage of IAC DevOps python Demo
        Environment image: Managed Image
        Operating System: Amazon Linux 2
        Runtimes: Standard
        Image: latest available today (aws/codebuild/amazonlinux2-x86_64-standard:3.0)
        Environment Type: Linux
        Service Role: New (leave to defaults including Role Name)
        Build specifications: use a buildspec file
        Buildspec name - optional: buildspec-dev.yml (Ensure that this file is present in root folder of your github repository)
        Rest all leave to defaults
        Click on Continue to CodePipeline
    Project Name: This value should be auto-populated with codebuild-python-iacdevops-aws-cp1
    Build Type: Single Build
    Click Next

Add Deploy Stage

    Click on Skip Deploy Stage

Review Stage

    Click on Create Pipeline

Step-15: Verify the Pipeline created

    Verify Source Stage: Should pass
    Verify Build Stage: should fail with error
    Verify Build Stage logs by clicking on details in pipeline screen

Decrypted Variables Error Message: AccessDeniedException: User: arn:aws:sts::180789647333:assumed-role/codebuild-codebuild-python-iacdevops-aws-cp1-service-role/AWSCodeBuild-97595edc-1db1-4070-97a0-71fa862f0993 is not authorized to perform: ssm:GetParameters on resource: arn:aws:ssm:us-east-1:180789647333:parameter/CodeBuild/MY_AWS_ACCESS_KEY_ID

Step-16: Fix ssm:GetParameters IAM Role issues
Step-16-01: Get IAM Service Role used by CodeBuild Project

    Get the IAM Service Role name CodeBuild Project is using
    Go to CodeBuild -> codebuild-python-iacdevops-aws-cp1 -> Edit -> Environment
    Make a note of Service Role ARN

# CodeBuild Service Role ARN 
arn:aws:iam::180789647333:role/service-role/codebuild-codebuild-python-iacdevops-aws-cp1-service-role

Step-16-02: Create IAM Policy with Systems Manager Get Parameter Read Permission

    Go to Services -> IAM -> Policies -> Create Policy
    Service: Systems Manager
    Actions: Get Parameters (Under Read)
    Resources: All
    Click Next Tags
    Click Next Review
    Policy name: systems-manger-get-parameter-access
    Policy Description: Read Parameters from Parameter Store in AWS Systems Manager Service
    Click on Create Policy

Step-16-03: Associate this Policy to IAM Role

    Go to Services -> IAM -> Roles -> Search for codebuild-codebuild-python-iacdevops-aws-cp1-service-role
    Attach the polic named systems-manger-get-parameter-access

Step-17: Re-run the CodePipeline

    Go to Services -> CodePipeline -> python-iacdevops-aws-cp1
    Click on Release Change
    Verify Source Stage:
        Should pass
    Verify Build Stage:
        Verify Build Stage logs by clicking on details in pipeline screen
        Verify Cloudwatch -> Log Groups logs too (Logs saved in CloudWatch for additional reference)

Step-18: Verify Resources
